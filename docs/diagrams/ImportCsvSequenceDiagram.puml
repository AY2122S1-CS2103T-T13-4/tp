@startuml
'https://plantuml.com/sequence-diagram

autonumber

MainWindow -> Logic: importData()
Logic -> CsvAddressBookImportExport: importIntoAddressBook(model)
CsvAddressBookImportExport -> CsvAddressBookImportExport: importAddressBook(filepath,model)
CsvAddressBookImportExport -> CsvUtil: readCsvFile(filepath)
CsvUtil -> CsvUtil: deserializeObjectFromCsvFile(filepath)
CsvUtil -> FileUtil: readFromFile(filepath)
CsvUtil <- FileUtil: all row string details
CsvUtil -> CsvUtil: fromCsvString()

loop number of  rows in import - 1
    CsvUtil -> CsvUtil: createPerson(String, rowNumber)
    CsvUtil -> CsvAdaptedPerson: <<create>>

    CsvAdaptedPerson -> CsvAdaptedPerson: setDetails(String)
    CsvAdaptedPerson -> CsvAdaptedPerson: setInterestList(String)
    CsvUtil <- CsvAdaptedPerson: valid person
    end

CsvAddressBookImportExport <- CsvUtil: optional(list of valid people)
CsvAddressBookImportExport -> CsvAddressBookImportExport: addImportIntoAddressBook(list, model)

loop no. of valid people
    CsvAddressBookImportExport  -> model
	Model -> AddressBook: duplicateIndex(person)
	AddressBook -> UniquePersonList : indexOfDuplicate(person)
	AddressBook <- UniquePersonList : int of duplicate in list
	Model <- AddressBook : int of duplicate in list
    CsvAddressBookImportExport <- Model : int of duplicate in list
    alt int duplicate = -1
        CsvAddressBookImportExport ->  Model: add(person)
    else int duplicate != -1
        alt importPerson has been called
            CsvAddressBookImportExport ->  Model: update(person)
        end
    end

Logic <- CsvAddressBookImportExport
Logic -> Model: getAddressbook()
Logic -> Storage: saveAddressbook(model)
Logic -> CsvAddressBookImportExport: getImportStatus()
Logic <- CsvAddressBookImportExport: status details
MainWindow <- Logic: status details

@enduml